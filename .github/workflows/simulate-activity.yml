name: Simulate User Activity (Comms - Messaging Gateway)

on:
  schedule:
    - cron: "0 14,18 * * 1-5"   # Weekdays at 14:00 & 18:00 UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  simulate:
    runs-on: ubuntu-latest

    env:
      # Team actors for THIS repo
      ACTORS: |
        [
          {"username":"roshni","git_name":"Roshni","git_email":"roshni@cortex.io","pat_secret":"PAT_ROSHNI"},
          {"username":"taylor","git_name":"Taylor Schmidt","git_email":"taylor@cortex.io","pat_secret":"PAT_TAYLOR"},
          {"username":"gianpaul","git_name":"GianPaul","git_email":"gianpaul@cortex.io","pat_secret":"PAT_GIANPAUL"}
        ]
      # Org-wide reviewer pool (must be available as secrets to this repo)
      REVIEWER_CANDIDATES: |
        ["PAT_TAYLOR","PAT_CATHLEEN","PAT_SALLY","PAT_JEFF","PAT_STEPH","PAT_CHASE","PAT_MARION","PAT_ROSHNI","PAT_GIANPAUL"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Pick one random actor
        id: pick
        shell: bash
        run: |
          len=$(jq 'length' <<< "${ACTORS}")
          if [ "$len" -eq 0 ]; then echo "chosen=" >> $GITHUB_OUTPUT; exit 0; fi
          idx=$((RANDOM % len))
          obj=$(jq -r ".[$idx]" <<< "${ACTORS}")
          echo "username=$(jq -r '.username' <<< "$obj")" >> $GITHUB_OUTPUT
          echo "git_name=$(jq -r '.git_name' <<< "$obj")" >> $GITHUB_OUTPUT
          echo "git_email=$(jq -r '.git_email' <<< "$obj")" >> $GITHUB_OUTPUT
          echo "pat_secret=$(jq -r '.pat_secret' <<< "$obj")" >> $GITHUB_OUTPUT

      - name: Resolve actor token (skip if missing)
        id: auth
        shell: bash
        run: |
          if [ -z "${{ steps.pick.outputs.pat_secret }}" ]; then echo "skip=true" >> $GITHUB_OUTPUT; exit 0; fi
          TOKEN="${{ secrets[steps.pick.outputs.pat_secret] }}"
          if [ -z "$TOKEN" ]; then echo "skip=true" >> $GITHUB_OUTPUT; exit 0; fi
          echo "$TOKEN" | gh auth login --with-token
          echo "GH_TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "AUTHOR=${{ steps.pick.outputs.git_name }}" >> $GITHUB_ENV
          echo "EMAIL=${{ steps.pick.outputs.git_email }}" >> $GITHUB_ENV
          echo "BRANCH=sim/${{ steps.pick.outputs.username }}-$(date +%s)" >> $GITHUB_ENV

      - name: Stop if no actor token
        if: steps.auth.outputs.skip == 'true'
        run: echo "No valid actor token; ending run."

      - name: Pick scenario
        id: scenario
        if: steps.auth.outputs.skip != 'true'
        run: |
          scenarios=("OPEN_ONLY" "COMMENT_REVIEW" "APPROVE" "MERGE" "CLOSE_UNMERGED" "BIG_DIFF" "SMALL_DIFF")
          weights=(4 3 2 2 1 1 2)
          total=0; for w in "${weights[@]}"; do total=$((total+w)); done
          r=$((RANDOM % total)); acc=0
          for i in "${!scenarios[@]}"; do acc=$((acc+weights[i])); if [ $r -lt $acc ]; then echo "value=${scenarios[i]}" >> $GITHUB_OUTPUT; break; fi; done

      - name: Commit change (README preferred; vary size)
        if: steps.auth.outputs.skip != 'true'
        run: |
          git config user.name "$AUTHOR"
          git config user.email "$EMAIL"
          # Maybe reuse branch to create multi-run timelines
          if [ $((RANDOM % 10)) -lt 3 ]; then
            existing=$(git ls-remote --heads origin "sim/${{ steps.pick.outputs.username }}-*" | head -n1 | awk '{print $2}' | cut -d/ -f3-)
            if [ -n "$existing" ]; then git fetch origin "$existing"; git checkout -b "$existing" "origin/$existing"; echo "BRANCH=$existing" >> $GITHUB_ENV; else git checkout -b "$BRANCH"; fi
          else
            git checkout -b "$BRANCH"
          fi
          touch README.md; mkdir -p changelogs
          if [ "${{ steps.scenario.outputs.value }}" = "BIG_DIFF" ]; then
            f="changelogs/${{ steps.pick.outputs.username }}-$(date +%s).md"; for i in $(seq 1 $((150 + RANDOM % 350))); do echo "- change $i at $(date -u)"; done > "$f"
          else
            echo "Update by $AUTHOR at $(date -u)" >> README.md
            if [ $((RANDOM % 6)) -eq 0 ] && [ -f "changelogs/old-${{ steps.pick.outputs.username }}.md" ]; then git rm -f "changelogs/old-${{ steps.pick.outputs.username }}.md" || true; fi
          fi
          git add -A; git commit -m "feat: sim update by $AUTHOR at $(date -u)"; git push -u origin "$BRANCH"

      - name: Maybe open a PR
        id: openpr
        if: steps.auth.outputs.skip != 'true'
        run: |
          if [ $((RANDOM % 10)) -lt 7 ]; then
            URL=$(gh pr create --title "Sim PR by $AUTHOR" --body "Automated demo PR at $(date -u). Scenario: ${{ steps.scenario.outputs.value }}" --base main --head "$BRANCH" --draft=false || true)
            echo "url=$URL" >> $GITHUB_OUTPUT
          fi

      - name: Find open PR to act on
        id: pr
        if: steps.auth.outputs.skip != 'true'
        run: |
          if [ -n "${{ steps.openpr.outputs.url }}" ]; then NUM=$(gh pr view "${{ steps.openpr.outputs.url }}" --json number -q .number); else NUM=$(gh pr list --state open --author "$AUTHOR" --json number,createdAt -q 'sort_by(.createdAt) | .[0].number'); fi
          if [ "$NUM" = "null" ] || [ -z "$NUM" ]; then echo "number=" >> $GITHUB_OUTPUT; else echo "number=$NUM" >> $GITHUB_OUTPUT; fi

      - name: Maybe add a PR comment
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        run: |
          if [ $((RANDOM % 2)) -eq 0 ]; then gh pr comment ${{ steps.pr.outputs.number }} --body "General comment by $AUTHOR at $(date -u)"; fi

      - name: Pick reviewer secret
        id: pick_reviewer
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        shell: bash
        run: |
          pool=$(jq -r 'map(select(. != "'${{ steps.pick.outputs.pat_secret }}'"))' <<< "${REVIEWER_CANDIDATES}")
          chosen=""
          for i in {1..10}; do
            len=$(jq 'length' <<< "$pool"); [ "$len" -eq 0 ] && break
            idx=$((RANDOM % len)); sec=$(jq -r ".[$idx]" <<< "$pool")
            val="${{ secrets[sec] }}"; if [ -n "$val" ]; then chosen="$sec"; break; fi
          done
          echo "secret=$chosen" >> $GITHUB_OUTPUT

      - name: Leave review as reviewer
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number && steps.pick_reviewer.outputs.secret
        run: |
          echo "${{ secrets[steps.pick_reviewer.outputs.secret] }}" | gh auth login --with-token
          kinds=("COMMENT" "COMMENT" "APPROVE"); k=${kinds[$RANDOM % ${#kinds[@]}]}
          if [ "$k" = "APPROVE" ]; then gh pr review ${{ steps.pr.outputs.number }} --approve --body "Approval at $(date -u)"; else gh pr review ${{ steps.pr.outputs.number }} --comment --body "Review comment at $(date -u)"; fi
          echo "$GH_TOKEN" | gh auth login --with-token

      - name: Maybe merge PR
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        run: |
          if [ $((RANDOM % 10)) -lt 4 ]; then set +e; gh pr merge ${{ steps.pr.outputs.number }} --merge --delete-branch; set -e; fi

      - name: Maybe close without merge
        if: steps.auth.outputs.skip != 'true' && steps.pr.outputs.number
        run: |
          if [ $((RANDOM % 20)) -lt 3 ]; then gh pr close ${{ steps.pr.outputs.number }} --delete-branch; fi
